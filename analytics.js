<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–µ–π–¥–∂</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: #333;
            min-height: 100vh;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .container {
            width: 100%;
            max-width: 1000px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            margin-top: 20px;
        }
        header {
            text-align: center;
            margin-bottom: 30px;
        }
        h1 {
            color: #2c3e50;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        .subtitle {
            color: #7f8c8d;
            font-size: 1.2rem;
        }
        .badge-container {
            display: flex;
            justify-content: center;
            margin: 20px 0;
        }
        .analytics-badge {
            position: relative;
            background: linear-gradient(135deg, #2d3748, #4a5568);
            color: #e2e8f0;
            border-radius: 12px;
            padding: 20px;
            width: 320px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
            border: 1px solid #4a5568;
            font-family: system-ui, -apple-system, sans-serif;
            font-size: 14px;
            z-index: 1000;
        }
        .badge-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
            padding-bottom: 12px;
            border-bottom: 1px solid #4a5568;
        }
        .badge-title {
            font-weight: bold;
            font-size: 18px;
        }
        .close-btn {
            background: none;
            border: none;
            color: #a0aec0;
            font-size: 24px;
            cursor: pointer;
            transition: color 0.3s;
        }
        .close-btn:hover {
            color: #fff;
        }
        .date-picker {
            width: 100%;
            padding: 10px;
            border-radius: 6px;
            border: 1px solid #4a5568;
            background: #1a202c;
            color: white;
            margin-bottom: 16px;
        }
        .quick-buttons {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
            margin-bottom: 16px;
        }
        .quick-btn {
            padding: 10px;
            background: #4a5568;
            border: none;
            border-radius: 6px;
            color: white;
            cursor: pointer;
            transition: background 0.3s;
        }
        .quick-btn:hover {
            background: #2d3748;
        }
        .stats-display {
            margin-bottom: 16px;
        }
        .stat-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
        }
        .stat-value {
            font-weight: bold;
            font-size: 18px;
        }
        .date-info {
            font-size: 13px;
            color: #a0aec0;
            margin-bottom: 8px;
            text-align: center;
        }
        .last-update {
            font-size: 12px;
            color: #718096;
            text-align: center;
            margin-bottom: 12px;
        }
        .footer {
            font-size: 12px;
            color: #718096;
            text-align: center;
        }
        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
            margin: 30px 0;
        }
        .control-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 14px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .control-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        .control-btn.whatsapp {
            background: #25D366;
        }
        .control-btn.reset {
            background: #e74c3c;
        }
        .debug-panel {
            background: #f8f9fa;
            border-left: 4px solid #3498db;
            padding: 20px;
            margin-top: 30px;
            font-family: monospace;
            font-size: 14px;
            max-height: 250px;
            overflow-y: auto;
            border-radius: 8px;
        }
        .debug-title {
            color: #2c3e50;
            margin-bottom: 15px;
            font-weight: bold;
        }
        .log-entry {
            margin-bottom: 8px;
            padding-bottom: 8px;
            border-bottom: 1px solid #eee;
        }
        .log-time {
            color: #7f8c8d;
            margin-right: 10px;
        }
        .instructions {
            background: #e8f4fc;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            line-height: 1.6;
        }
        .instructions h3 {
            color: #2c3e50;
            margin-bottom: 15px;
        }
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            .controls {
                flex-direction: column;
                align-items: center;
            }
            .control-btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</h1>
            <p class="subtitle">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–µ–π–¥–∂ —Å —Å—á–µ—Ç—á–∏–∫–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ WhatsApp –∫–ª–∏–∫–æ–≤</p>
        </header>
        
        <div class="instructions">
            <h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</h3>
            <p>1. –ë–µ–π–¥–∂ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤–∏–¥–µ–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
            <p>2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä" –∏ "–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å WhatsApp" –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤</p>
            <p>3. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–µ–π–¥–∂–µ –Ω–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"</p>
            <p>4. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>
        </div>
        
        <div class="badge-container">
            <div class="analytics-badge" id="analytics-badge">
                <div class="badge-header">
                    <div class="badge-title">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
                    <button class="close-btn">√ó</button>
                </div>
                
                <input type="date" id="stats-date-picker" class="date-picker">
                
                <div class="quick-buttons">
                    <button id="btn-today" class="quick-btn">–°–µ–≥–æ–¥–Ω—è</button>
                    <button id="btn-yesterday" class="quick-btn">–í—á–µ—Ä–∞</button>
                </div>
                
                <div class="stats-display">
                    <div class="stat-row">
                        <span>üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</span>
                        <span id="views-count" class="stat-value">0</span>
                    </div>
                    <div class="stat-row">
                        <span>üì± WhatsApp:</span>
                        <span id="whatsapp-count" class="stat-value">0</span>
                    </div>
                </div>
                
                <div id="date-stats" class="date-info">31 –∞–≤–≥—É—Å—Ç–∞ (–°–µ–≥–æ–¥–Ω—è)</div>
                <div id="last-update" class="last-update">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: --:--:--</div>
                
                <div class="footer">
                    üåç –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫
                </div>
            </div>
        </div>
        
        <div class="controls">
            <button id="simulate-view" class="control-btn">
                <span>üëÄ</span> –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            </button>
            <button id="simulate-whatsapp" class="control-btn whatsapp">
                <span>üì±</span> –°–∏–º—É–ª—è—Ü–∏—è WhatsApp
            </button>
            <button id="refresh-stats" class="control-btn">
                <span>üîÑ</span> –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            </button>
            <button id="reset-stats" class="control-btn reset">
                <span>üóëÔ∏è</span> –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </button>
        </div>
        
        <div class="debug-panel">
            <div class="debug-title">–ñ—É—Ä–Ω–∞–ª –æ—Ç–ª–∞–¥–∫–∏:</div>
            <div id="debug-log"></div>
        </div>
    </div>

    <script>
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        const CONFIG = {
            STORAGE_KEY: 'global-stats-data',
            UPDATE_INTERVAL: 3000
        };

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const Utils = {
            formatDate: (date = new Date()) => date.toISOString().split('T')[0],
            addDays: (date, days) => {
                const result = new Date(date);
                result.setDate(result.getDate() + days);
                return result;
            },
            getYesterday: () => {
                const yesterday = new Date();
                yesterday.setDate(yesterday.getDate() - 1);
                return Utils.formatDate(yesterday);
            },
            log: (message, type = 'info') => {
                const logElement = document.getElementById('debug-log');
                const timestamp = new Date().toLocaleTimeString();
                const logEntry = document.createElement('div');
                logEntry.className = 'log-entry';
                
                let icon = 'üîµ';
                if (type === 'error') {
                    icon = 'üî¥';
                    logEntry.style.color = '#e74c3c';
                } else if (type === 'success') {
                    icon = 'üü¢';
                    logEntry.style.color = '#27ae60';
                } else if (type === 'warning') {
                    icon = 'üü°';
                    logEntry.style.color = '#f39c12';
                }
                
                logEntry.innerHTML = `<span class="log-time">[${timestamp}]</span> ${icon} ${message}`;
                
                if (logElement) {
                    logElement.appendChild(logEntry);
                    logElement.scrollTop = logElement.scrollHeight;
                }
            }
        };

        // –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const StatsManager = {
            async get() {
                try {
                    const data = localStorage.getItem(CONFIG.STORAGE_KEY);
                    return data ? JSON.parse(data) : {};
                } catch (error) {
                    Utils.log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`, 'error');
                    return {};
                }
            },
            
            async save(data) {
                try {
                    localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(data));
                    Utils.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage', 'success');
                    return true;
                } catch (error) {
                    Utils.log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
                    return false;
                }
            },
            
            async increment(type) {
                try {
                    const today = Utils.formatDate();
                    Utils.log(`–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ ${type} –¥–ª—è –¥–∞—Ç—ã ${today}`);
                    
                    const data = await this.get();
                    
                    if (!data[today]) {
                        data[today] = { views: 0, whatsapp: 0 };
                        Utils.log(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞—Ç—ã ${today}`);
                    }
                    
                    data[today][type] = (data[today][type] || 0) + 1;
                    
                    const saveResult = await this.save(data);
                    if (saveResult) {
                        Utils.log(`–°—á–µ—Ç—á–∏–∫ ${type} —É–≤–µ–ª–∏—á–µ–Ω –¥–æ ${data[today][type]}`, 'success');
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    this.updateUI(data);
                    
                    return saveResult;
                } catch (error) {
                    Utils.log(`–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: ${error.message}`, 'error');
                    return false;
                }
            },
            
            async updateUI(data = null) {
                try {
                    if (!data) {
                        data = await this.get();
                    }
                    
                    const datePicker = document.getElementById('stats-date-picker');
                    const selectedDate = datePicker.value || Utils.formatDate();
                    const stats = data[selectedDate] || { views: 0, whatsapp: 0 };
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    const viewsCount = document.getElementById('views-count');
                    const whatsappCount = document.getElementById('whatsapp-count');
                    const dateStats = document.getElementById('date-stats');
                    const lastUpdate = document.getElementById('last-update');
                    
                    if (viewsCount) viewsCount.textContent = stats.views;
                    if (whatsappCount) whatsappCount.textContent = stats.whatsapp;
                    
                    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    const dateObj = new Date(selectedDate);
                    let dateLabel = dateObj.toLocaleDateString('ru-RU', { 
                        day: 'numeric', 
                        month: 'long' 
                    });
                    
                    if (selectedDate === Utils.formatDate()) {
                        dateLabel += ' (–°–µ–≥–æ–¥–Ω—è)';
                    } else if (selectedDate === Utils.getYesterday()) {
                        dateLabel += ' (–í—á–µ—Ä–∞)';
                    }
                    
                    if (dateStats) dateStats.textContent = dateLabel;
                    if (lastUpdate) lastUpdate.textContent = 
                        `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleTimeString()}`;
                        
                } catch (error) {
                    Utils.log(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: ${error.message}`, 'error');
                }
            },
            
            async reset() {
                try {
                    localStorage.removeItem(CONFIG.STORAGE_KEY);
                    Utils.log('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
                    this.updateUI({});
                    return true;
                } catch (error) {
                    Utils.log(`–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
                    return false;
                }
            }
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', async function() {
            Utils.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const urlParams = new URLSearchParams(window.location.search);
            const isAdmin = urlParams.has('admin') && urlParams.get('admin') === 'true';
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ picker
            const datePicker = document.getElementById('stats-date-picker');
            if (datePicker) {
                datePicker.value = Utils.formatDate();
            }
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await StatsManager.updateUI();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
            const simulateViewBtn = document.getElementById('simulate-view');
            if (simulateViewBtn) {
                simulateViewBtn.addEventListener('click', async () => {
                    Utils.log('–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...');
                    await StatsManager.increment('views');
                });
            }
            
            const simulateWhatsappBtn = document.getElementById('simulate-whatsapp');
            if (simulateWhatsappBtn) {
                simulateWhatsappBtn.addEventListener('click', async () => {
                    Utils.log('–°–∏–º—É–ª—è—Ü–∏—è –∫–ª–∏–∫–∞ WhatsApp...');
                    await StatsManager.increment('whatsapp');
                });
            }
            
            const refreshStatsBtn = document.getElementById('refresh-stats');
            if (refreshStatsBtn) {
                refreshStatsBtn.addEventListener('click', async () => {
                    Utils.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
                    await StatsManager.updateUI();
                });
            }
            
            const resetStatsBtn = document.getElementById('reset-stats');
            if (resetStatsBtn) {
                resetStatsBtn.addEventListener('click', async () => {
                    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) {
                        Utils.log('–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
                        await StatsManager.reset();
                    }
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–µ–π–¥–∂–∞
            const closeBtn = document.querySelector('.close-btn');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => {
                    Utils.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –±–µ–π–¥–∂–∞...', 'warning');
                    alert('–í —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ –∑–∞–∫—Ä—ã–ª–æ –±—ã –±–µ–π–¥–∂, –Ω–æ –≤ –¥–µ–º–æ –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º');
                });
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
            if (datePicker) {
                datePicker.addEventListener('change', (e) => {
                    Utils.log(`–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ${e.target.value}`);
                    StatsManager.updateUI();
                });
            }
            
            // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–∞—Ç
            const btnToday = document.getElementById('btn-today');
            if (btnToday) {
                btnToday.addEventListener('click', () => {
                    if (datePicker) {
                        datePicker.value = Utils.formatDate();
                        Utils.log('–í—ã–±—Ä–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞');
                        StatsManager.updateUI();
                    }
                });
            }
            
            const btnYesterday = document.getElementById('btn-yesterday');
            if (btnYesterday) {
                btnYesterday.addEventListener('click', () => {
                    if (datePicker) {
                        datePicker.value = Utils.getYesterday();
                        Utils.log('–í—ã–±—Ä–∞–Ω–∞ –≤—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞');
                        StatsManager.updateUI();
                    }
                });
            }
            
            // –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            setTimeout(async () => {
                await StatsManager.increment('views');
                Utils.log('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
            }, 1000);
            
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂
            if (isAdmin) {
                const badgeContainer = document.querySelector('.badge-container');
                if (badgeContainer) {
                    badgeContainer.style.display = 'flex';
                }
                Utils.log('–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –±–µ–π–¥–∂ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
            }
        });

        // –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        window.GlobalStats = {
            get: () => StatsManager.get(),
            track: (type) => StatsManager.increment(type),
            updateUI: () => StatsManager.updateUI()
        };
    </script>
</body>
</html>
